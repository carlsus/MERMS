// <auto-generated />
using System;
using MERMS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MERMS.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210307011450_PriceMonitoring")]
    partial class PriceMonitoring
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.12");

            modelBuilder.Entity("MERMS.Models.ApprehensionConfiscation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<double>("BoardFeet")
                        .HasColumnType("REAL");

                    b.Property<double>("CubicMeter")
                        .HasColumnType("REAL");

                    b.Property<string>("Custodian")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfConfiscation")
                        .HasColumnType("TEXT");

                    b.Property<string>("EstimatedValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Jurisdiction")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfPieces")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Offender")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParaphernaliaSerialNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("PlaceOfApprehension")
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<string>("Species")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("TrackingNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("VehiclePlateNo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ApprehensionConfiscations");
                });

            modelBuilder.Entity("MERMS.Models.Confiscation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("BoardFeet")
                        .HasColumnType("REAL");

                    b.Property<string>("CaseTitleRespondent")
                        .HasColumnType("TEXT");

                    b.Property<string>("CourtFiled")
                        .HasColumnType("TEXT");

                    b.Property<double>("CubicMeter")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("DateFiled")
                        .HasColumnType("TEXT");

                    b.Property<string>("DocketCaseNo")
                        .HasColumnType("TEXT");

                    b.Property<double>("EstimatedValue")
                        .HasColumnType("REAL");

                    b.Property<string>("FilePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("ForestProductStockPiled")
                        .HasColumnType("TEXT");

                    b.Property<string>("Jurisdiction")
                        .HasColumnType("TEXT");

                    b.Property<string>("KindSpecies")
                        .HasColumnType("TEXT");

                    b.Property<string>("NatureOfViolation")
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("TrackingNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("VehiclePlateNo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Confiscation");
                });

            modelBuilder.Entity("MERMS.Models.DonatedConfiscated", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfDonation")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoneeRecipient")
                        .HasColumnType("TEXT");

                    b.Property<double>("EstimatedMarketValue")
                        .HasColumnType("REAL");

                    b.Property<string>("FilePath")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfPieces")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Purpose")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpeciesForm")
                        .HasColumnType("TEXT");

                    b.Property<string>("TrackingNo")
                        .HasColumnType("TEXT");

                    b.Property<double>("VolumeBoardFeet")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("DonatedConfiscateds");
                });

            modelBuilder.Entity("MERMS.Models.MultiForestProtection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AttendanceSheet")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfMeeting")
                        .HasColumnType("TEXT");

                    b.Property<string>("LetterOfInvitation")
                        .HasColumnType("TEXT");

                    b.Property<string>("MinutesOfMeeting")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfAttendees")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhotoDocumentation")
                        .HasColumnType("TEXT");

                    b.Property<string>("TrackingNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("VenueOfMeeting")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MultiForestProtections");
                });

            modelBuilder.Entity("MERMS.Models.PriceMonitoring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CenroConcerned")
                        .HasColumnType("TEXT");

                    b.Property<string>("CenroReport")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfSubmission")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Month")
                        .HasColumnType("TEXT");

                    b.Property<string>("PenroReport")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReceivedPenro")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReleasedCenro")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PriceMonitorings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MERMS.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MobileNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("OfficeNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
